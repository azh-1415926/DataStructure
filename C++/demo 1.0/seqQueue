#ifndef _SEQ_QUEUE_H_
#define _SEQ_QUEUE_H_
#include<iostream>
const int QUEUE_PUSH=0;
const int QUEUE_POP=1;
template<class Type,int size=10>
class seqQueue {
    Type* pQueue;
    int head;
    int tail;
    int capacity;
    int flag;
    public:
        seqQueue();
        bool isEmpty();
        bool isFull();
        Type front();
        bool Enqueue(Type data);
        void Dequeue();
        ~seqQueue();
};
template<class Type,int size>
seqQueue<Type,size>::seqQueue()
    :capacity(size)
{
    pQueue=new Type[capacity];
    head=tail=0;
    flag=QUEUE_POP;
}
template<class Type,int size>
bool seqQueue<Type,size>::isEmpty(){
    return (head==tail)&&(flag==QUEUE_POP);
}
template<class Type,int size>
bool seqQueue<Type,size>::isFull(){
    return (tail==head)&&(flag==QUEUE_PUSH);
}
template<class Type,int size>
Type seqQueue<Type,size>::front(){
    if(isEmpty())
        return 0;
    return pQueue[head];
}
template<class Type,int size>
bool seqQueue<Type,size>::Enqueue(Type data){
    if(isFull())
        return false;
    pQueue[tail]=data;
    tail=(tail+1)%capacity;
    flag=QUEUE_PUSH;
    return true;
}
template<class Type,int size>
void seqQueue<Type,size>::Dequeue(){
    if(isEmpty())
        return;
    head=(head+1)%capacity;
    flag=QUEUE_POP;
}
template<class Type,int size>
seqQueue<Type,size>::~seqQueue(){
    delete[] pQueue;
}
#endif